<?php

/**
 * @file
 * Allows a user's username to be assigned based on tokens.
 */

use Drupal\Core\Database\Database;

/**
 * Case should be left as is in the generated username.
 */
define('AUN_CASE_LEAVE_ASIS', 0);

/**
 * Case should be lowercased in the generated username.
 */
define('AUN_CASE_LOWER', 1);

/**
 * Remove the punctuation from the username.
 */
define('AUN_PUNCTUATION_REMOVE', 0);

/**
 * Replace the punctuation with the separator in the username.
 */
define('AUN_PUNCTUATION_REPLACE', 1);

/**
 * Leave the punctuation as it is in the username.
 */
define('AUN_PUNCTUATION_DO_NOTHING', 2);

/**
 * Implements hook_form_FORM_ID_alter().
 */
function auto_username_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#type'] = 'hidden';
  $form['account']['name']['#value'] = \Drupal::service('password_generator')->generate();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function auto_username_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#type'] = 'hidden';
}

/**
 * Implements hook_user_insert().
 */
function auto_username_user_insert($account) {
  $new_name = \Drupal::service('auto_username.utilities')->autoUsernameGenerateUsername($account);
  // No point updating anything if the generated name was just the same.
  if ($account->name == $new_name) {
    return;
  }

  // Replace with generated username.
  Database::getConnection()
    ->update('users_field_data')
    ->fields(array('name' => $new_name))
    ->condition('uid', $account->id())
    ->execute();
  $account->name = $new_name;

}

/**
 * Implements hook_user_update().
 */
function auto_username_user_update($account) {
  if (\Drupal::config('auto_username.settings')->get('aun_update_on_edit')) {
    // Same processing as for user insert.
    auto_username_user_insert($account);
  }
}

/**
 * Clean token values.
 *
 * Callback from token replacement service.
 *
 * @param array $replacements
 *   An array of token replacements that need to be "cleaned".
 */
function auto_username_clean_token_values(&$replacements) {
  foreach ($replacements as $token => $value) {
    $replacements[$token] = \Drupal::service('auto_username.utilities')->autoUsernameCleanstring($value);
  }
}


