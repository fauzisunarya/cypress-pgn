<?php
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\migrate\Plugin\migrate\process\Explode;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\workflow\Entity\WorkflowTransition;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ConnectException;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function media_upload_theme() {
  return [
    'crud_content_block' => [
      'variables' => [
        'data' => [],
      ],
    ],
  ];
}

function media_upload_generate_landingpage_url($entity, $return=false){
  if (empty($entity->type->entity)) {
    return;
  }
  $content_type = $entity->type->entity->get('type');
  if ($content_type==='landing') {
    $path = \Drupal::service('path_alias.manager')->getAliasByPath("/node/".$entity->id()); // output: /landing/slug
    $landing_page_url = $entity->field_lan_website_full->getString(); // expected output: landingpage/slug

    $slug = explode( 'landing/',$path)[1];

    if ($landing_page_url !== "landingpage/".$slug) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($entity->id());
      $landing_page_url = "landingpage/" . $slug;
      $node->field_lan_website_full = $landing_page_url; // output: landingpage/slug

      // info : baseurl from ENV

      $node->save();
    }
    if ($return) {
      return $landing_page_url;
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function media_upload_entity_update(Drupal\Core\Entity\EntityInterface $entity){
  media_upload_generate_landingpage_url($entity);
}

/**
 * Implements hook_form_alter() for customize form.
 */
function media_upload_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    // remove field workflow if not an admin
    if (!empty($form['field_workflow_status']) && !in_array('administrator',\Drupal::currentUser()->getRoles())) {
      $form['field_workflow_status']['#access'] = false;
    }

    // if content = approved & user is not superadmin, redirect to edit revision
    // next flow : if the revision has already approved, it will replace the previous approved content
    \Drupal::service('media_upload.workflow_helper')->check_edit_revision();

    // if have workflow status
    if (!empty($form['field_workflow_status']) && !in_array('administrator', \Drupal::currentUser()->getRoles()) && preg_match("/^node-.+-form$/", $form['#id'])) {
      \Drupal::messenger()->addStatus("This content requires approval before appearing in the list");
      // $form
    }
}

function media_upload_form_node_landing_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!in_array('administrator',\Drupal::currentUser()->getRoles())) {
      $node = $form_state->getformObject()->getEntity();
      $landing_uuid = $node->uuid();

      $redirect_url = $_ENV['APP_URL'] . '/builder/builder.php?project=' . $landing_uuid;
      
      Drupal::service('media_upload.page_helper')->redirect($redirect_url);
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_content_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($_GET['paket_id'])) {
        $paket = Node::load($_GET['paket_id']);
        // content type = paket || citem
        if ($paket!==null && in_array($paket->type->entity->get('type'), ['paket', 'citem', 'ebis', 'wibs'])) {
            $form['field_pkt_ctn_paket_ref']['widget'][0]['target_id']['#default_value'] = $paket;
            $form['field_pkt_ctn_paket_ref']['#access'] = false;
        }
    }
    if (!empty($_GET['catalog_id'])) {
      $catalog = Node::load($_GET['catalog_id']);
      if ($catalog!==null && $catalog->type->entity->get('type')==='product_catalog') {
          $form['field_pkt_ctn_paket_ref']['widget'][0]['target_id']['#default_value'] = $catalog;
          $form['field_pkt_ctn_paket_ref']['#access'] = false;
      }
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_content_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($_GET['paket_id'])) {
        $paket = Node::load($_GET['paket_id']);
        // content type = paket || citem
        if ($paket!==null && in_array($paket->type->entity->get('type'), ['paket', 'citem', 'ebis', 'wibs'])) {
            $form['field_pkt_ctn_paket_ref']['widget'][0]['target_id']['#default_value'] = $paket;
            $form['field_pkt_ctn_paket_ref']['#access'] = false;
        }
    }
    else if (!empty($_GET['catalog_id'])) {
      $catalog = Node::load($_GET['catalog_id']);
      if ($catalog!==null && $catalog->type->entity->get('type')==='product_catalog') {
          $form['field_pkt_ctn_paket_ref']['widget'][0]['target_id']['#default_value'] = $catalog;
          $form['field_pkt_ctn_paket_ref']['#access'] = false;
      }
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if (!in_array('administrator',\Drupal::currentUser()->getRoles())) {
    $req_uri = preg_replace("/^\/node\//", '/paket/', $_SERVER['REQUEST_URI']);
    
    Drupal::service('media_upload.page_helper')->redirect($_ENV['APP_URL'] . $req_uri);
  }
}

/**
 * Alter query for views paket content for detail product catalog, show content from that catalog and from relation (paket)
 */
function media_upload_views_query_alter($view, $query) {
  
  if ($view->id()==="block_paket_content") {
    foreach ($query->where as $i => &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (strpos($condition['field'], 'field_pkt_ctn_paket_ref')) {
          foreach ($condition['value'] as $value) {
            $id = $value;

            if (!empty($id)) {
              $node = Node::load($id);
              if ($node!==null && $node->type->entity->get('type')==='product_catalog') {
                // the query is where ...field_pkt_ctn_paket_ref... = id
                // change to IN query, id is that catalog and relation node (paket content type) . catalog has multi paket
        
                $id_content = array_map(function($paket){
                  return $paket->id();
                },$node->field_pct_list_paket->referencedEntities());
                array_unshift($id_content, $node->id());

                $condition = [
                  'field' => 'node__field_pkt_ctn_paket_ref.field_pkt_ctn_paket_ref_target_id',
                  'value' => $id_content,
                  'operator' => 'IN',
                ];
              }
            }
          }
        }
      }
    }
  }

  // for show list all landing or own landing
  // own landing = if role is landing_owner ; all landing = if role is not landing_owner
  else if ($view->id()==="landing_master") {

    $current_user = Drupal::currentUser();
    if (!in_array('landing_owner', $current_user->getRoles())) {
      
      // from views config, there is a filter to show landing, where owner = current user id
      // to show all landing (for super admin, product ower, etc) remove this condition
      foreach ($query->where as $i => &$condition_group) {
        foreach ($condition_group['conditions'] as $j => &$condition) {
          if (strpos($condition['field'], 'field_lan_owner')) {
            
            unset($query->where[$i]['conditions'][$j]);

          }
        }
      }
    }
  }

} 

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_media_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($_GET['paket_id'])) {
        $paket = Node::load($_GET['paket_id']);
        // content type = paket || citem
        if ($paket!==null && in_array($paket->type->entity->get('type'), ['paket', 'citem', 'ebis', 'wibs'])) {
            $form['field_media_paket_ref']['widget'][0]['target_id']['#default_value'] = $paket;
            $form['field_media_paket_ref']['#access'] = false;
        }
    }
    elseif(!empty($_GET['catalog_id'])) {
      $catalog = Node::load($_GET['catalog_id']);
      if ($catalog!==null && $catalog->type->entity->get('type')==='product_catalog') {
          $form['field_media_paket_ref']['widget'][0]['target_id']['#default_value'] = $catalog;
          $form['field_media_paket_ref']['#access'] = false;
      }
    }
    $form['field_video']['#access'] = false;
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_media_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($_GET['paket_id'])) {
        $paket = Node::load($_GET['paket_id']);
        // content type = paket || citem
        if ($paket!==null && in_array($paket->type->entity->get('type'), ['paket', 'citem', 'ebis', 'wibs'])) {
            $form['field_media_paket_ref']['widget'][0]['target_id']['#default_value'] = $paket;
            $form['field_media_paket_ref']['#access'] = false;
        }
    }
    elseif(!empty($_GET['catalog_id'])) {
      $catalog = Node::load($_GET['catalog_id']);
      if ($catalog!==null && $catalog->type->entity->get('type')==='product_catalog') {
          $form['field_media_paket_ref']['widget'][0]['target_id']['#default_value'] = $catalog;
          $form['field_media_paket_ref']['#access'] = false;
      }
    }
    $form['field_video']['#access'] = false;
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_video_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($_GET['paket_id'])) {
        $paket = Node::load($_GET['paket_id']);
        // content type = paket || citem
        if ($paket!==null && in_array($paket->type->entity->get('type'), ['paket', 'citem', 'ebis', 'wibs'])) {
            $form['field_video_paket_ref']['widget'][0]['target_id']['#default_value'] = $paket;
            $form['field_video_paket_ref']['#access'] = false;
        }
    }
    elseif (!empty($_GET['catalog_id'])) {
      $catalog = Node::load($_GET['catalog_id']);
      if ($catalog!==null && $catalog->type->entity->get('type')==='product_catalog') {
          $form['field_video_paket_ref']['widget'][0]['target_id']['#default_value'] = $catalog;
          $form['field_video_paket_ref']['#access'] = false;
      }
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_paket_video_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($_GET['paket_id'])) {
        $paket = Node::load($_GET['paket_id']);
        // content type = paket || citem
        if ($paket!==null && in_array($paket->type->entity->get('type'), ['paket', 'citem', 'ebis', 'wibs'])) {
            $form['field_video_paket_ref']['widget'][0]['target_id']['#default_value'] = $paket;
            $form['field_video_paket_ref']['#access'] = false;
        }
    }
    elseif (!empty($_GET['catalog_id'])) {
      $catalog = Node::load($_GET['catalog_id']);
      if ($catalog!==null && $catalog->type->entity->get('type')==='product_catalog') {
          $form['field_video_paket_ref']['widget'][0]['target_id']['#default_value'] = $catalog;
          $form['field_video_paket_ref']['#access'] = false;
      }
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_product_catalog_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['field_pct_setting_temp_pricing']['#access'] = false;
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_product_catalog_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['field_pct_setting_temp_pricing']['#access'] = false;
}

/**
 * Implements hook_form_FORM_ID_alter() for customize form.
 */
function media_upload_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['revision']['#disabled'] = true;
  $form['revision']['#default_value'] = 1;
}

/**
 * Process external request 
 * 
 * type = process/update/done
 */
function update_progress_external_request($type='', $message='', &$node = null){
  
  if ($node===null || $node->type->entity->get('type')!=='external_request') return [];

  if (!in_array($type, ['process','update','done']))  return [];

  $status = $type==='update' ? 'process' : $type; // type update: status still process
  $node->field_req_status = $status;
  
  $log_status = json_decode($node->field_req_response_log->getString(),true);
  array_unshift($log_status, [
    'date' => \Drupal::service('date.formatter')->format(\Drupal::time()->getRequestTime(), 'medium'),
    'status' => $status,
    'message' => $message
  ]);
  $node->field_req_response_log = json_encode($log_status);

  $request_token = $node->field_req_request_token->getString();
  $request_data = [
    'title' => $node->title->getString(),
    'message' => $node->field_req_message->getString(),
    'callback_url' => $node->field_req_callback_url->getString()
  ];

  // attached content
  $attached_content = [];
  if ($status==='done' && !empty($_POST['field_req_attached_content'])) {
    foreach ($_POST['field_req_attached_content'] as $content) {
      $content_name = trim($content['target_id']);
      $arr_word = explode(' ',$content_name);
      $content_id = str_replace(['(',')'],'',$arr_word[count($arr_word)-1]);

      if (!empty($content_id)) {
        $content_node = Node::load($content_id);

        if ($content_node->type->entity->get('type')==='landing') {
          $url = Drupal::service('media_upload.shortlink_helper')->get_landing_shortlink($content_node);
        }
        else{
          $url = Drupal::service('media_upload.workflow_helper')->get_url_alias($content_id);
        }
        
        $attached_content[] = [
          'id' => $content_id,
          'uuid' => $content_node->uuid(),
          'title' => $content_node->title->getString(),
          'url' => $url
        ];
      }
    }
  }

  return [
    'status' => $status,
    'message' => $message,
    'log' => $log_status,
    'request_token' => $request_token,
    'content' => $attached_content,
    'request_data' => $request_data 
  ];

}

function media_upload_node_presave(Drupal\Core\Entity\EntityInterface $node) {

  // add notification when changed workflow status
  if ($node->hasField('field_workflow_status')) {
    
    /**
     * Flow for workflow status
     * See :  Drupal\media_upload\Helper\Workflow 
     *        Drupal\media_upload\Controller\ApprovalController
     *        media_upload_node_presave in media_upload.module
     */

    if ($node->isNew()) {
      $workflow = $node->field_workflow_status->getString();
      if (empty($workflow)) {
        $node->field_workflow_status = 'workflow_status_pending';
      }

      if ($workflow!=='workflow_status_approve') {
        $node->setUnpublished();
      }
      else{
        $node->setPublished();
      }

      /**
       * Notif on new Content, will be processed and sent on media_upload_node_insert()
       */
    }
    else{
      $current_state = $node->field_workflow_status->getString();
      $prev_state = $node->original->field_workflow_status->getString(); 

      if ($current_state!=='workflow_status_approve') {
        $node->setUnpublished();
      }
      else{
        $node->setPublished();
      }

      if ($current_state !== $prev_state || ($prev_state==='workflow_status_reject' && $current_state!=='workflow_status_approve')) {

        if ($prev_state==='workflow_status_reject' && $current_state!=='workflow_status_approve'){
  
          // change state to revision
          $transition = WorkflowTransition::create([$prev_state, 'field_name' => 'field_workflow_status']);
          $transition->setTargetEntity($node);
          $transition->setValues('workflow_status_revision', \Drupal::currentUser()->id(), \Drupal::time()->getRequestTime(), 'Make revision', TRUE);
          $transition->execute(TRUE);
          if ($tid = $transition->id()) {
            // Set the new value of the workflow field
            $node->field_workflow_status->value = 'workflow_status_revision';
          }
  
          $notif_title = 'Make revision for '.$node->type->entity->label(). ' "'.$node->title->getString().'" and waiting for approval';
        }
        else{
          $prev_status = ucfirst(str_replace('workflow_status_','',$prev_state)) ?? 'Pending';
          $current_status = ucfirst(str_replace('workflow_status_','',$current_state));
          $notif_title = 'Status '.$node->type->entity->label(). ' "'.$node->title->getString().'" changed from '.$prev_status.' to '.$current_status;
        }

        // send notif to: approval (on new revision) or user (on approve/reject)
        $send_to_appproval = false;
        $send_to_user = false;

        if (str_contains($notif_title, 'Make revision for')) {
          // for revision. note: notif when create content sending from media_upload_node_insert()
          $send_to_appproval = true;
        }
        else{
          // for update status reject/approve
          $send_to_user = true;
        }

        $notif_to = []; $email_to = []; $approval = [];

        if ($send_to_appproval) {
          $query = Drupal::entityTypeManager()->getStorage('user')->getQuery();
          $ids = $query->condition('status', 1)->condition('roles', 'approval')->execute();
          $users = User::loadMultiple($ids);

          foreach ($users as $user) {
            //approval
            $email_to[] = $user->getEmail(); // email notif
            $notif_to[] = $user->id(); // internal notif
    
            $approval[] = ['target_id' => $user->id()];
          }
        }

        if ($send_to_user) {
          $notif_to[] = $node->getOwnerId(); //owner
          $notif_to[] = $node->getRevisionUser()->id(); //last editor
          $email_to[] = $node->getOwner()->getEmail();
          $email_to[] = $node->getRevisionUser()->getEmail();
        }
  
        // send mail to user (author, last editor, or approval)
        $email_to = array_filter(array_unique($email_to), fn($val) => !empty($val));
        $statusEmail = \Drupal::service('restapi_telkom.app_helper')->sendEmailV2(
          $email_to, 
          "Notice : Notification CMS", 
          ['body' => "<div>{$notif_title}</div>"]
        );
  
        // save data notification
        $notification = Node::create([
          'type'        => 'notification',
          'title'       => $notif_title,
          'field_notif_message' => $_GET['message'] ?? '',
          'field_notif_content' => [['target_id'=> $node->id()]],
          'field_notif_approval' => $approval,
          'field_notif_user' => array_map(function($id){
            return [
              'target_id' => $id
            ];
          }, array_unique($notif_to)),
        ]);
        $notification->save();
      }
    }
    
  }

  // form done request from external
  elseif (
    $node->type->entity->get('type')==='external_request' && 
    !$node->isNew() && 
    !empty($_POST['progress_type']) && 
    in_array($_POST['progress_type'], ['process', 'update', 'done'])
  ) {
    if (!empty($_GET['destination']) && str_contains($_GET['destination'],'/external-request/')) {
      
      // set message, set link content id, and send notif to callback url
      $message = strip_tags($_POST['message']) ?? '';
      $status = $_POST['progress_type']==='update' ? 'process' : $_POST['progress_type']; // type update: status still process

      $data = update_progress_external_request($status, $message, $node);

      $client = new Client();
      try{
        $response = $client->post($data['request_data']['callback_url'], [
          'headers' => [
            'Content-Type' => 'application/json',
            'Accept'       => 'application/json',
          ],
          'body' => json_encode($data)
        ]);
      }
      catch (ClientException $e) {
        // do something ?
      }
      catch(ConnectException $e){
        // do something ?
      }

      // send notif to assigned user
      if (!empty($_POST['field_req_assigned_user']) && count($_POST['field_req_assigned_user'])===1 && !empty($_POST['field_req_assigned_user'][0]['target_id'])) {
        $assigned_id = explode(" (",$_POST['field_req_assigned_user'][0]['target_id']);
        $assigned_id = $assigned_id[count($assigned_id)-1];
        $assigned_id = str_replace(")",'',$assigned_id);

        $prev_assigned = $node->original->field_req_assigned_user->getValue();
        if (count($prev_assigned)===0 || (count($prev_assigned)>0 && $prev_assigned[0]['target_id']!=$assigned_id)) {

          // send email
          $user_email = Drupal::entityTypeManager()->getStorage('user')->load($assigned_id);
          $user_email = $user_email ? $user_email->getEmail() : '';
          if (!empty($user_email)) {
            $statusEmail = \Drupal::service('restapi_telkom.app_helper')->sendEmailV2(
              [$user_email], 
              "Notice : Notification CMS", 
              ['body' => "<div>Assigned to task \"{$node->title->getString()}\"</div>"]
            );
          }

          // send internal notif
          // save data notification
          $notification = Node::create([
            'type'        => 'notification',
            'title'       => "Assigned to task \"{$node->title->getString()}\"",
            'field_notif_message' => '',
            'field_notif_content' => [['target_id'=> $node->id()]],
            'field_notif_user' => [['target_id'=> $assigned_id]]
          ]);
          $notification->save();
        }
      }

    }
  }
}

function media_upload_node_insert(Drupal\Core\Entity\EntityInterface $node){

  if ($node->hasField('field_workflow_status')) {
    $status = $node->field_workflow_status->getString();
    if ($status==='workflow_status_pending' || $status==='workflow_status_revision') {

      if ($status==='workflow_status_pending') {
        $notif_title = "New ".$node->type->entity->label(). ' "'.$node->title->getString().'" waiting for approval';
      }else {
        $notif_title = 'Make revision for '.$node->type->entity->label(). ' "'.$node->title->getString().'" and waiting for approval';
      }
      
      // send notif to approval
      $notif_to = []; $email_to = []; $approval = [];

      $query = Drupal::entityTypeManager()->getStorage('user')->getQuery();
      $ids = $query->condition('status', 1)->condition('roles', 'approval')->execute();
      $users = User::loadMultiple($ids);

      foreach ($users as $user) {
        //approval
        $email_to[] = $user->getEmail(); // email notif
        $notif_to[] = $user->id(); // internal notif

        $approval[] = ['target_id' => $user->id()];
      }

      // send mail to user (author, last editor, or approval)
      $email_to = array_filter(array_unique($email_to), fn($val) => !empty($val));
      $statusEmail = \Drupal::service('restapi_telkom.app_helper')->sendEmailV2(
        $email_to, 
        "Notice : Notification CMS", 
        ['body' => "<div>$notif_title</div>"]
      );

      // save data notification
      $notification = Node::create([
        'type'        => 'notification',
        'title'       => $notif_title,
        'field_notif_message' => $_GET['message'] ?? '',
        'field_notif_content' => [['target_id'=> $node->id()]],
        'field_notif_approval' => $approval,
        'field_notif_user' => array_map(function($id){
          return [
            'target_id' => $id
          ];
        }, array_unique($notif_to)),
      ]);
      $notification->save();
    }
  }
}

function media_upload_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node') return;

  // delete relation
  switch ($entity->bundle()) {
    case 'landing':
      \Drupal::service('media_upload.landing_helper')->delete_landing_data($entity);
      break;
    
    case 'landing_custom_form':
      \Drupal::service('media_upload.landing_helper')->delete_landing_form($entity);
      break;
    
    default:
      # code...
      break;
  }

}

function media_upload_form_node_external_request_edit_form_alter(&$form, FormStateInterface $form_state, $form_id){
  
  if (in_array('approval',Drupal::currentUser()->getRoles())) {
    
    if (
      !str_contains($_GET['destination'], 'external-request/') ||
      empty($_GET['progress_type']) || 
      !in_array($_GET['progress_type'],['process','update','done'])
    ) {
      return Drupal::service('media_upload.page_helper')->redirect($_ENV['APP_URL'].'/external-request');
    }

    $disabled = [
      'field_req_callback_url', 'field_req_message', 'field_req_referer', 'field_req_request_token',
      'field_req_requester', 'field_req_response_log', 'field_req_status', 'revision', 'title'
    ];

    if ($_GET['progress_type']==='done') {
      $disabled[] = 'field_req_assigned_user'; //for done
    }
    else{
      $disabled[] = 'field_req_attached_content'; //for process/update
    }

    foreach ($disabled as $field) {
      $form[$field]['#access'] = false;
    }

    $form['progress_type'] = [
      '#type' => 'hidden',
      '#value' => $_GET['progress_type'],
      '#attributes' => array('name'=> 'progress_type')
    ];

    $form_message = [
      '#type' => 'textarea',
      '#title' => 'Message',
      '#value' => $_GET['message'],
      '#attributes' => array('class' => ['external-request-message'], 'name'=> 'message')
    ];

    $form['message'] = [
      '#theme' => 'container',
      '#attributes' => [
        'class' => ['field--type-string','field--name-title', 'field--widget-string-textfield', 'card-body'], /* Class on the wrapping DIV element */
      ],
      '#children' => [
        $form_message
      ],
    ];

    $form['#attributes']['class'][] = 'form-hide-revision'; // to hide the revision tab on the right

  }
}