# stage yg dijalankan
stages:
  - code-quality
  - pre-build
  - build
  - deploy
  - automated-security
# tag runner
.runner-tag:
  neuron:
    - docker
    - internal

# ci cache
#cache:
#  key: $CI_COMMIT_REF_SLUG
#  paths:
#    - vendor/Zend/

# variables
variables:
  SONAR_USER_HOME: "$CI_PROJECT_DIR/.sonar"
  GIT_DEPTH: "0"
  SONAR_HOST_URL: "https://sonar.neuronworks.co.id"
  SONAR_SOURCES: "."
  SONAR_EXCLUSIONS: "vendor/**"
  #SONAR_EXCLUSIONS: "**/*.html,**/*.phtml,**/*.css,**/*.js"

# ---------------------------------------------- Rules for Trigger -----------------------------------------------------
.sonar_rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      allow_failure: false
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main"'
      allow_failure: true

.dev_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "development" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      variables:
        APP_ENV: development

.staging_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging-qa" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      variables:
        APP_ENV: staging

.prod_rules:
  rules:
    - if: '$CI_COMMIT_TAG =~ "/^doorv3-v.*$/"'
      variables:
        APP_ENV: production

.release_rules:
  rules:
    - if: '$CI_COMMIT_TAG =~ "/^v.*$/"'
      variables:
        APP_ENV: production

# ---------------------------------------------- Pararel Job -----------------------------------------------------
.parallel-matrix-job:
  parallel:
    matrix:
      - APPS:
        - doorv3
        CLIENT_NAME:
          - jagooit
          
# ---------------------------------------------- Code Quality -----------------------------------------------------
sonarqube-check:
  stage: code-quality
  tags: !reference [.runner-tag, neuron]
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=900 -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.sourceEncoding=UTF-8 -Dsonar.projectName="$CI_PROJECT_NAME $CI_COMMIT_REF_NAME" -Dsonar.projectKey="${CI_PROJECT_ID}_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}" -Dsonar.sources=$SONAR_SOURCES -Dsonar.exclusions=$SONAR_EXCLUSIONS
  rules:
    - !reference [.sonar_rules, rules]
    - !reference [.dev_rules, rules]
    - !reference [.staging_rules, rules]
    - !reference [.prod_rules, rules]
    - !reference [.release_rules, rules]

# ---------------------------------------------- Build & Publish -----------------------------------------------------
prepare-version:
  stage: pre-build
  tags: !reference [.runner-tag, neuron]
  script:
    - >
      if [ "$APP_ENV" == "production" ]; then
        export APP_VERSION=`date +%Y.%m.%d`-${APP_ENV}_${CI_COMMIT_TAG}
      else
        export APP_VERSION=`date +%Y.%m.%d`-${APP_ENV}_${CI_COMMIT_SHORT_SHA}
      fi
    - echo "APP_ENV=$APP_ENV" > build.env
    - echo "APP_VERSION=$APP_VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 week
  rules:
    - !reference [.dev_rules, rules]
    - !reference [.staging_rules, rules]
    - !reference [.prod_rules, rules]
    - !reference [.release_rules, rules]

build-cms:
  stage: build
  needs:
    ['sonarqube-check', 'prepare-version']
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags: !reference [.runner-tag, neuron]
  # script tahapan build docker image
  script:
    # create docker config (json) untuk kaniko --> biar kaniko bisa auth ke container registry gitlab utk push
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    # jalankan build docker image & push ke container registry
    - >-
      /kaniko/executor
      --cache=true --cache-repo="${CI_REGISTRY_IMAGE}/cache"
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile-neuron"
      --build-arg=APP_VERSION="$APP_VERSION"
      --destination "${CI_REGISTRY_IMAGE}:${APP_VERSION}"
  #trigger pipeline
  rules:
    - !reference [.dev_rules, rules]
    - !reference [.staging_rules, rules]
    - !reference [.prod_rules, rules]
    - !reference [.release_rules, rules]
  allow_failure: false

# ---------------------------------------------- Trigger Deploy -----------------------------------------------------
trigger-deploy:
  stage: deploy
  needs: ['sonarqube-check','prepare-version','build-cms']
  variables:
    APP_NAME: cms-services
  tags: !reference [.runner-tag, neuron]
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' app env '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAME]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      "https://git.neuron.id/api/v4/projects/774/trigger/pipeline"
  environment: $APP_ENV
  #trigger pipeline
  rules:
    - !reference [.dev_rules, rules]
    - !reference [.staging_rules, rules]
    - !reference [.prod_rules, rules]
  allow_failure: false

trigger-deploy-client:
  stage: deploy
  parallel: !reference [.parallel-matrix-job, parallel]
  needs: ['sonarqube-check','prepare-version','build-cms']
  variables:
    APP_NAME: cms-services
  tags: !reference [.runner-tag, neuron]
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' app env '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAME]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      --form "variables[CLIENT_NAME]=$CLIENT_NAME"
      "https://git.neuron.id/api/v4/projects/774/trigger/pipeline"
  environment: $APP_ENV-$CLIENT_NAME
  #trigger pipeline
  rules:
    - !reference [.release_rules, rules]
  allow_failure: false